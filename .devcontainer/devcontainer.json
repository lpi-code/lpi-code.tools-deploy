{
	// For quick reference: https://containers.dev/implementors/json_reference/
	"name": "Python Docker",
	//"image": "python:3.12-bookworm",
	"build": {
		"context": "..",
		"dockerfile": "Dockerfile"
	},

	// 1. Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": []

	// 2. Use 'mounts' to make a list of local directories available inside the container. More info: https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount
	// "mounts": [],

	// 3. Use 'runArgs' to pass arguments to the container. 
	// run the container with all GPUs
	"runArgs": [
		// Make things work with podman
  		"--userns=keep-id:uid=1000,gid=1000"
 	],

	// 4. Features to add to the Dev Container. More info: https://containers.dev/implementors/features.
	"features": {
		// ZSH without OMZ
		"ghcr.io/devcontainers/features/common-utils:2": {
			"installZsh": "true",
			"configureZshAsDefaultShell": "true",
			"installOhMyZsh": "false",
			"installOhMyZshConfig": "false",
			"username": "vscode",
			"userUid": "1000",
			"userGid": "1000",
			"upgradePackages": "true"
		},

		// Python with Poetry, Ruff, Mypy, MonkeyType and Bandit, installed using pipx
		"ghcr.io/devcontainers/features/python:1": {
			"installTools": "true",
			"toolsToInstall": "poetry,ruff,mypy,MonkeyType,bandit"
		},
		// git
		"ghcr.io/devcontainers/features/git:1": {
			"version": "os-provided",
			"ppa": "false"
		},
		//"ghcr.io/devcontainers/features/docker-in-docker": {},
		"ghcr.io/hspaans/devcontainer-features/ansible-lint:1": {}
		// Install better jinja
	},
	

	// 5. Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {
				"python.defaultInterpreterPath": "/usr/local/bin/python"
			},
			"extensions": [
				"ms-azuretools.vscode-docker",
				"sugatoray.jinja-extension-pack",
				"redhat.vscode-yaml",
				"njpwerner.autodocstring"
			]
			
		}
	},

	// make it privileged
	"privileged": true,

	// bypass to work with podman

	// set HOME to /vscode
	"containerEnv": {
		"HOME": "/home/vscode"
	},
	"remoteEnv": {
		"HOME": "/home/vscode"
	},
	
	// set folder to /home/vscode/ansible_collections
	"workspaceFolder": "/ansible_collections/lpi_code/tools_deploy",
	"workspaceMount": "source=${localWorkspaceFolder},target=/ansible_collections/lpi_code/tools_deploy,type=bind,consistency=cached",
	// Create the directory at the end of build



	// 6. Set `remoteUser` to `root` to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"containerUser": "vscode",
	"updateRemoteUserUID": true

	// the following commands are related to container lifecylce. More info: https://containers.dev/implementors/json_reference/#lifecycle-scripts
	
	// 7. Use 'initializeCommand' to run commands ON THE HOST before container is created or started.
	// "initializeCommand": "",

	// 8. Use 'onCreateCommand' to run commands INSIDE THE CONTAINER after it started for the first time.
	//"onCreateCommand": "mkdir /home/vscode/ansible_collections",
	
	// 9. Use 'updateContentCommand' to run commands if the root filetree have any changes, during container creation.
	// "updateContentCommand": "",

	// 10. Use 'postCreateCommand' to run commands after the container is created.
	//"postCreateCommand": "pip3 install --user -r requirements.txt"

	// 11. Use 'postStartCommand' to run a command each time the container starts successfully.
	// "postStartCommand": "",
	
	// 12. Use 'postAttachCommand' to run a command each time a tool attaches to the container successfully. 
	// "postAttachCommand": "",
}